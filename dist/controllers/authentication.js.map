{"version":3,"file":"authentication.js","sourceRoot":"","sources":["../../src/controllers/authentication.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response, NextFunction } from 'express'\nimport { v4 as uuidv4 } from 'uuid'\n\nimport crypto from 'crypto'\nimport bcrypt from 'bcrypt'\nimport bcryptConfig from '../config/bcrypt'\nimport authConfig from '../config/auth'\n\nimport jwt from 'jsonwebtoken'\nimport { TCustomer } from '../models/Customer'\nimport Customer from '../models/Customer'\nimport CustomerService from '../services/customer'\nimport { BadRequestError } from '../helpers/apiError'\n\n// POST /Customers\nexport const signin = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  const { useremail, password } = req.body\n\n  try {\n    const customer = await Customer.findOne({ useremail }).exec()\n    //console.log('response customer/signin', customer)\n    const pass = customer ? customer.password : ''\n    const isValidPassword = await bcrypt.compare(password, pass)\n    if (!useremail || !password)\n      return res.status(400).json({ message: 'please fillup all data' })\n    if (!customer) return res.status(401).json({ message: 'wrong credential' })\n    if (!isValidPassword)\n      return res.status(401).json({ message: 'Email or Password is Wrong!' })\n\n    const accessToken = jwt.sign(\n      { id: customer.useremail },\n      authConfig.secret,\n      {\n        expiresIn: 7200,\n      }\n    )\n\n    const resObj = {\n      _id: customer.id,\n      firstName: customer.firstName,\n      lastName: customer.lastName,\n      useremail: customer.useremail,\n      phoneNumber: customer.phoneNumber,\n      address: customer.address,\n      password: customer.password,\n      roles: customer.roles,\n      accessToken,\n    }\n    res.status(200).send(resObj)\n  } catch (error) {\n    if (error instanceof Error && error.name == 'ValidationError') {\n      next(new BadRequestError('Invalid Request', error))\n    } else if (error instanceof Error && error.message.indexOf('11000')) {\n      res.status(401).json({\n        status: 'duplicate email',\n        statusCode: 401,\n        message: `Email ${useremail} already registered`,\n      })\n      return\n    } else {\n      next(error)\n    }\n  }\n}\n\n// POST /Customers\nexport const signup = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  const {\n    firstName,\n    lastName,\n    useremail,\n    phoneNumber,\n    address,\n    password,\n    roles,\n  } = req.body\n  console.log('data from cont/auth/signup', firstName)\n  try {\n    const customer = new Customer({\n      _id: uuidv4(),\n      firstName,\n      lastName,\n      useremail,\n      phoneNumber: Number(phoneNumber),\n      address,\n      password: await bcrypt.hash(password, bcryptConfig.salt),\n      roles,\n    })\n    console.log('customer from cont/authentication/signup', customer)\n    // one way to check if email already registered: await User.findOne({ email }).exec() === true;\n\n    //await CustomerService.create(customer)\n    await customer.save()\n    res.set('Access-Control-Allow-Origin', '*')\n    res.json(customer)\n    console.log('closing signup')\n  } catch (error) {\n    console.log('signup error')\n    if (error instanceof Error && error.name == 'ValidationError') {\n      console.log('signup error', error.message)\n      next(new BadRequestError('Invalid Request', error))\n    } else if (error instanceof Error && error.message.indexOf('11000')) {\n      res.status(401).json({\n        status: 'duplicate email',\n        statusCode: 401,\n        message: `Email ${useremail} already registered`,\n      })\n      return\n    } else {\n      next(error)\n    }\n  }\n}\n"]}