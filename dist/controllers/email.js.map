{"version":3,"file":"email.js","sourceRoot":"","sources":["../../src/controllers/email.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,4DAAmC;AAEnC,kDAAqD;AAE9C,MAAM,SAAS,GAAG,CACvB,GAAY,EACZ,GAAa,EACb,IAAkB,EAClB,EAAE;IACF,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,IAAI,CAAA;QAEjD,aAAa;QACb,IACE,OAAO,KAAK,KAAK,QAAQ;YACzB,OAAO,IAAI,KAAK,QAAQ;YACxB,OAAO,MAAM,KAAK,QAAQ;YAC1B,OAAO,OAAO,KAAK,QAAQ,EAC3B;YACA,MAAM,IAAI,0BAAe,CAAC,eAAe,CAAC,CAAA;SAC3C;QAED,MAAM,SAAS,GAAG,oBAAU,CAAC,eAAe,CAAC;YAC3C,OAAO,EAAE,OAAO;YAChB,IAAI,EAAE;gBACJ,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ;gBAC1B,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,eAAe;aAClC;SACF,CAAC,CAAA;QAEF,MAAM,WAAW,GAAiB;YAChC,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ;YAC1B,EAAE,EAAE,KAAK;YACT,OAAO,EAAE,GAAG,IAAI,KAAK,MAAM,EAAE;YAC7B,IAAI,EAAE,GAAG,OAAO,EAAE;SACnB,CAAA;QAED,MAAM,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAA;QACrC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,yBAAyB,EAAE,CAAC,CAAA;KAC7D;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,KAAK,YAAY,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,iBAAiB,EAAE;YAC7D,IAAI,CAAC,IAAI,0BAAe,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC,CAAA;SACpD;aAAM;YACL,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAA;YAC5C,IAAI,CAAC,IAAI,0BAAe,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC,CAAA;SACzD;KACF;AACH,CAAC,CAAA,CAAA;AA3CY,QAAA,SAAS,aA2CrB","sourcesContent":["import { Request, Response, NextFunction } from 'express'\nimport nodemailer from 'nodemailer'\nimport Mail from 'nodemailer/lib/mailer'\nimport { BadRequestError } from '../helpers/apiError'\n\nexport const sendEmail = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { email, name, mobile, message } = req.body\n\n    // Validation\n    if (\n      typeof email !== 'string' ||\n      typeof name !== 'string' ||\n      typeof mobile !== 'string' ||\n      typeof message !== 'string'\n    ) {\n      throw new BadRequestError('Invalid input')\n    }\n\n    const transport = nodemailer.createTransport({\n      service: 'gmail',\n      auth: {\n        user: process.env.MY_EMAIL,\n        pass: process.env.MY_APP_PASSWORD,\n      },\n    })\n\n    const mailOptions: Mail.Options = {\n      from: process.env.MY_EMAIL,\n      to: email,\n      subject: `${name}, ${mobile}`,\n      text: `${message}`,\n    }\n\n    await transport.sendMail(mailOptions)\n    res.status(200).json({ message: 'Email sent successfully' })\n  } catch (error) {\n    if (error instanceof Error && error.name == 'ValidationError') {\n      next(new BadRequestError('Invalid Request', error))\n    } else {\n      console.error('Error sending email:', error)\n      next(new BadRequestError('Failed to send email', error))\n    }\n  }\n}\n"]}