{"version":3,"file":"server.js","sourceRoot":"","sources":["../src/server.ts"],"names":[],"mappings":";;;;;AAAA,gEAAuC;AACvC,wDAA+B;AAE/B,gDAAuB;AACvB,4CAA4C;AAE5C,MAAM,QAAQ,GAAG,qBAAW,CAAA;AAC5B,gDAAgD;AAChD,2BAA2B;AAC3B,8BAA8B;AAC9B,6BAA6B;AAC7B,0BAA0B;AAC1B,IAAI;AAEJ,8FAA8F;AAE9F,sCAAsC;AACtC,kBAAQ;KACL,OAAO,CAAC,QAAQ,EAAE;IACjB,SAAS,EAAE,IAAI;CAChB,CAAC;KACD,IAAI,CAAC,GAAG,EAAE;IACT,uBAAuB;IACvB,aAAG,CAAC,MAAM,CAAC,aAAG,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE;QAC/B,OAAO,CAAC,GAAG,CACT,oDAAoD,EACpD,aAAG,CAAC,GAAG,CAAC,MAAM,CAAC,EACf,aAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CACf,CAAA;QACD,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAA;IACzC,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC;KACD,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE;IACpB,6CAA6C;IAC7C,OAAO,CAAC,GAAG,CACT,iEAAiE,GAAG,GAAG,CACxE,CAAA;IACD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AACjB,CAAC,CAAC,CAAA;AACJ;;GAEG;AACH,aAAG,CAAC,GAAG,CAAC,IAAA,sBAAY,GAAE,CAAC,CAAA","sourcesContent":["import errorHandler from 'errorhandler'\nimport mongoose from 'mongoose'\nimport { Mongoose } from 'mongoose'\nimport app from './app'\nimport { MONGODB_URI } from './util/secrets'\n\nconst mongoUrl = MONGODB_URI\n// const options: mongoose.ConnectionOptions = {\n//   useNewUrlParser: true,\n//   useUnifiedTopology: true,\n//   useFindAndModify: false,\n//   useCreateIndex: true,\n// }\n\n//function connect(mongoUrl: string, options?: mongoose.ConnectionOptions): Promise<Mongoose>;\n\n// mongoose.connect(mongoUrl, options)\nmongoose\n  .connect(mongoUrl, {\n    autoIndex: true,\n  })\n  .then(() => {\n    // Start Express server\n    app.listen(app.get('port'), () => {\n      console.log(\n        '  App is running at http://localhost:%d in %s mode',\n        app.get('port'),\n        app.get('env')\n      )\n      console.log('  Press CTRL-C to stop\\n')\n    })\n  })\n  .catch((err: Error) => {\n    //console.log(app.get('port'),app.get('env'))\n    console.log(\n      'MongoDB connection error. Please make sure MongoDB is running. ' + err\n    )\n    process.exit(1)\n  })\n/**\n * Error Handler. Provides full stack - remove for production\n */\napp.use(errorHandler())\n"]}