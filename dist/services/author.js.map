{"version":3,"file":"author.js","sourceRoot":"","sources":["../../src/services/author.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,8DAAyD;AACzD,kDAAoE;AAEpE,0DAAiC;AAEjC,MAAM,MAAM,GAAG,CAAO,MAAsB,EAA2B,EAAE;IACvE,OAAO,MAAM,CAAC,IAAI,EAAE,CAAA;AACtB,CAAC,CAAA,CAAA;AAED,MAAM,QAAQ,GAAG,CAAO,QAAgB,EAA2B,EAAE;IACnE,MAAM,WAAW,GAAG,MAAM,gBAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;IACnD,IAAI,CAAC,WAAW,EAAE;QAChB,MAAM,IAAI,wBAAa,CAAC,UAAU,QAAQ,YAAY,CAAC,CAAA;KACxD;IAED,OAAO,WAAW,CAAA;AACpB,CAAC,CAAA,CAAA;AAED,MAAM,OAAO,GAAG,GAAoC,EAAE;IACpD,OAAO,gBAAM,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAA;AAC7C,CAAC,CAAA,CAAA;AAED,MAAM,SAAS,GAAG,GAAwB,EAAE;IAC1C,MAAM,gBAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAA;AAC7B,CAAC,CAAA,CAAA;AAED,MAAM,MAAM,GAAG,CACb,QAAgB,EAChB,MAA+B,EACC,EAAE;IAClC,MAAM,WAAW,GAAG,MAAM,gBAAM,CAAC,iBAAiB,CAAC,QAAQ,EAAE,MAAM,EAAE;QACnE,GAAG,EAAE,IAAI;KACV,CAAC,CAAA;IAEF,IAAI,CAAC,WAAW,EAAE;QAChB,MAAM,IAAI,wBAAa,CAAC,UAAU,QAAQ,YAAY,CAAC,CAAA;KACxD;IACD,OAAO,WAAW,CAAA;AACpB,CAAC,CAAA,CAAA;AAED,MAAM,YAAY,GAAG,CACnB,QAAgB,EACgB,EAAE;IAClC,MAAM,eAAe,GAAG,MAAM,cAAI,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAA;IAC9D,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;QAC9B,MAAM,IAAI,0BAAe,CACvB,gCAAgC,QAAQ,gDAAgD,CACzF,CAAA;KACF;IACD,MAAM,WAAW,GAAG,MAAM,gBAAM,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAA;IAC5D,IAAI,CAAC,WAAW,EAAE;QAChB,MAAM,IAAI,wBAAa,CAAC,mBAAmB,QAAQ,YAAY,CAAC,CAAA;KACjE;IACD,OAAO,WAAW,CAAA;AACpB,CAAC,CAAA,CAAA;AAED,kBAAe;IACb,MAAM;IACN,QAAQ;IACR,OAAO;IACP,SAAS;IACT,MAAM;IACN,YAAY;CACb,CAAA","sourcesContent":["import Author, { AuthorDocument } from '../models/Author'\nimport { BadRequestError, NotFoundError } from '../helpers/apiError'\nimport { result } from 'lodash'\nimport Book from '../models/Book'\n\nconst create = async (author: AuthorDocument): Promise<AuthorDocument> => {\n  return author.save()\n}\n\nconst findById = async (authorId: string): Promise<AuthorDocument> => {\n  const foundAuthor = await Author.findById(authorId)\n  if (!foundAuthor) {\n    throw new NotFoundError(`Author ${authorId} not found`)\n  }\n\n  return foundAuthor\n}\n\nconst findAll = async (): Promise<AuthorDocument[]> => {\n  return Author.find().sort({ fisrtName: 1 })\n}\n\nconst deleteAll = async (): Promise<void> => {\n  await Author.deleteMany({})\n}\n\nconst update = async (\n  authorId: string,\n  update: Partial<AuthorDocument>\n): Promise<AuthorDocument | null> => {\n  const foundAuthor = await Author.findByIdAndUpdate(authorId, update, {\n    new: true,\n  })\n\n  if (!foundAuthor) {\n    throw new NotFoundError(`Author ${authorId} not found`)\n  }\n  return foundAuthor\n}\n\nconst deleteAuthor = async (\n  authorId: string\n): Promise<AuthorDocument | null> => {\n  const booksWithAuthor = await Book.find({ authors: authorId })\n  if (booksWithAuthor.length > 0) {\n    throw new BadRequestError(\n      `Cannot remove author with id ${authorId}  as he/she associated with at least one book `\n    )\n  }\n  const foundAuthor = await Author.findByIdAndDelete(authorId)\n  if (!foundAuthor) {\n    throw new NotFoundError(`Author with id  ${authorId} not found`)\n  }\n  return foundAuthor\n}\n\nexport default {\n  create,\n  findById,\n  findAll,\n  deleteAll,\n  update,\n  deleteAuthor,\n}\n"]}