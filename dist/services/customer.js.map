{"version":3,"file":"customer.js","sourceRoot":"","sources":["../../src/services/customer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,kEAA+D;AAC/D,kDAAmD;AAEnD,MAAM,MAAM,GAAG,CACb,QAA0B,EACC,EAAE;IAC7B,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAA;AACxB,CAAC,CAAA,CAAA;AAED,MAAM,QAAQ,GAAG,CAAO,UAAkB,EAA6B,EAAE;IACvE,MAAM,aAAa,GAAG,MAAM,kBAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAA;IACzD,IAAI,CAAC,aAAa,EAAE;QAClB,MAAM,IAAI,wBAAa,CAAC,UAAU,UAAU,YAAY,CAAC,CAAA;KAC1D;IACD,OAAO,aAAa,CAAA;AACtB,CAAC,CAAA,CAAA;AAED,MAAM,OAAO,GAAG,GAAsC,EAAE;IACtD,OAAO,kBAAQ,CAAC,IAAI,EAAE,CAAA;AACxB,CAAC,CAAA,CAAA;AAED,MAAM,SAAS,GAAG,GAAwB,EAAE;IAC1C,MAAM,kBAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,CAAA;AAC/B,CAAC,CAAA,CAAA;AAED,MAAM,MAAM,GAAG,CACb,UAAkB,EAClB,MAAiC,EACC,EAAE;IACpC,MAAM,aAAa,GAAG,MAAM,kBAAQ,CAAC,iBAAiB,CAAC,UAAU,EAAE,MAAM,EAAE;QACzE,GAAG,EAAE,IAAI;KACV,CAAC,CAAA;IAEF,IAAI,CAAC,aAAa,EAAE;QAClB,MAAM,IAAI,wBAAa,CAAC,YAAY,UAAU,YAAY,CAAC,CAAA;KAC5D;IAED,OAAO,aAAa,CAAA;AACtB,CAAC,CAAA,CAAA;AAED,MAAM,cAAc,GAAG,CACrB,UAAkB,EACgB,EAAE;IACpC,MAAM,aAAa,GAAG,kBAAQ,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAA;IAC5D,IAAI,CAAC,aAAa,EAAE;QAClB,MAAM,IAAI,wBAAa,CAAC,YAAY,UAAU,YAAY,CAAC,CAAA;KAC5D;IAED,OAAO,aAAa,CAAA;AACtB,CAAC,CAAA,CAAA;AAED,kBAAe;IACb,MAAM;IACN,QAAQ;IACR,OAAO;IACP,SAAS;IACT,MAAM;IACN,cAAc;CACf,CAAA","sourcesContent":["import Customer, { CustomerDocument } from '../models/Customer'\nimport { NotFoundError } from '../helpers/apiError'\n\nconst create = async (\n  customer: CustomerDocument\n): Promise<CustomerDocument> => {\n  return customer.save()\n}\n\nconst findById = async (customerId: string): Promise<CustomerDocument> => {\n  const foundCustomer = await Customer.findById(customerId)\n  if (!foundCustomer) {\n    throw new NotFoundError(`Author ${customerId} not found`)\n  }\n  return foundCustomer\n}\n\nconst findAll = async (): Promise<CustomerDocument[]> => {\n  return Customer.find()\n}\n\nconst deleteAll = async (): Promise<void> => {\n  await Customer.deleteMany({})\n}\n\nconst update = async (\n  customerId: string,\n  update: Partial<CustomerDocument>\n): Promise<CustomerDocument | null> => {\n  const foundCustomer = await Customer.findByIdAndUpdate(customerId, update, {\n    new: true,\n  })\n\n  if (!foundCustomer) {\n    throw new NotFoundError(`Customer ${customerId} not found`)\n  }\n\n  return foundCustomer\n}\n\nconst deleteCustomer = async (\n  customerId: string\n): Promise<CustomerDocument | null> => {\n  const foundCustomer = Customer.findByIdAndDelete(customerId)\n  if (!foundCustomer) {\n    throw new NotFoundError(`Customer ${customerId} not found`)\n  }\n\n  return foundCustomer\n}\n\nexport default {\n  create,\n  findById,\n  findAll,\n  deleteAll,\n  update,\n  deleteCustomer,\n}\n"]}