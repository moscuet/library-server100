{"version":3,"file":"borrow.js","sourceRoot":"","sources":["../../src/services/borrow.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,8DAAyD;AACzD,kDAAmD;AAEnD,MAAM,MAAM,GAAG,CAAO,MAAsB,EAA2B,EAAE;IACvE,OAAO,MAAM,CAAC,IAAI,EAAE,CAAA;AACtB,CAAC,CAAA,CAAA;AAED,MAAM,QAAQ,GAAG,CAAO,QAAgB,EAA2B,EAAE;IACnE,MAAM,WAAW,GAAG,MAAM,gBAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;SAChD,QAAQ,CAAC,YAAY,CAAC;SACtB,QAAQ,CAAC,QAAQ,CAAC,CAAA;IACrB,IAAI,CAAC,WAAW,EAAE;QAChB,MAAM,IAAI,wBAAa,CAAC,UAAU,QAAQ,YAAY,CAAC,CAAA;KACxD;IAED,OAAO,WAAW,CAAA;AACpB,CAAC,CAAA,CAAA;AAED,MAAM,OAAO,GAAG,GAAoC,EAAE;IACpD,OAAO,gBAAM,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;AAChE,CAAC,CAAA,CAAA;AAED,MAAM,gBAAgB,GAAG,CACvB,UAAkB,EACS,EAAE;IAC7B,OAAO,gBAAM,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;AACvD,CAAC,CAAA,CAAA;AAED,MAAM,SAAS,GAAG,GAAwB,EAAE;IAC1C,MAAM,gBAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAA;AAC7B,CAAC,CAAA,CAAA;AAED,MAAM,MAAM,GAAG,CACb,QAAgB,EAChB,MAA+B,EACC,EAAE;IAClC,MAAM,WAAW,GAAG,MAAM,gBAAM,CAAC,iBAAiB,CAAC,QAAQ,EAAE,MAAM,EAAE;QACnE,GAAG,EAAE,IAAI;KACV,CAAC,CAAA;IAEF,IAAI,CAAC,WAAW,EAAE;QAChB,MAAM,IAAI,wBAAa,CAAC,UAAU,QAAQ,YAAY,CAAC,CAAA;KACxD;IAED,OAAO,WAAW,CAAA;AACpB,CAAC,CAAA,CAAA;AAED,MAAM,YAAY,GAAG,CACnB,QAAgB,EACgB,EAAE;IAClC,MAAM,WAAW,GAAG,gBAAM,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAA;IACtD,IAAI,CAAC,WAAW,EAAE;QAChB,MAAM,IAAI,wBAAa,CAAC,UAAU,QAAQ,YAAY,CAAC,CAAA;KACxD;IAED,OAAO,WAAW,CAAA;AACpB,CAAC,CAAA,CAAA;AAED,kBAAe;IACb,MAAM;IACN,QAAQ;IACR,OAAO;IACP,gBAAgB;IAChB,SAAS;IACT,MAAM;IACN,YAAY;CACb,CAAA","sourcesContent":["import Borrow, { BorrowDocument } from '../models/Borrow'\nimport { NotFoundError } from '../helpers/apiError'\n\nconst create = async (borrow: BorrowDocument): Promise<BorrowDocument> => {\n  return borrow.save()\n}\n\nconst findById = async (borrowId: string): Promise<BorrowDocument> => {\n  const foundBorrow = await Borrow.findById(borrowId)\n    .populate('customerId')\n    .populate('bookId')\n  if (!foundBorrow) {\n    throw new NotFoundError(`Borrow ${borrowId} not found`)\n  }\n\n  return foundBorrow\n}\n\nconst findAll = async (): Promise<BorrowDocument[]> => {\n  return Borrow.find().sort({ fisrtName: 1 }).populate('bookId')\n}\n\nconst findByCustomerId = async (\n  customerId: string\n): Promise<BorrowDocument[]> => {\n  return Borrow.find({ customerId }).populate('bookId')\n}\n\nconst deleteAll = async (): Promise<void> => {\n  await Borrow.deleteMany({})\n}\n\nconst update = async (\n  borrowId: string,\n  update: Partial<BorrowDocument>\n): Promise<BorrowDocument | null> => {\n  const foundBorrow = await Borrow.findByIdAndUpdate(borrowId, update, {\n    new: true,\n  })\n\n  if (!foundBorrow) {\n    throw new NotFoundError(`Borrow ${borrowId} not found`)\n  }\n\n  return foundBorrow\n}\n\nconst deleteBorrow = async (\n  borrowId: string\n): Promise<BorrowDocument | null> => {\n  const foundBorrow = Borrow.findByIdAndDelete(borrowId)\n  if (!foundBorrow) {\n    throw new NotFoundError(`Borrow ${borrowId} not found`)\n  }\n\n  return foundBorrow\n}\n\nexport default {\n  create,\n  findById,\n  findAll,\n  findByCustomerId,\n  deleteAll,\n  update,\n  deleteBorrow,\n}\n"]}